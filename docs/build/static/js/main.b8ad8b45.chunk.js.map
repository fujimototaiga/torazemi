{"version":3,"sources":["reportWebVitals.js","LikeButton.jsx","Article.jsx","components/FooBar.jsx","components/Hoge.jsx","Blog.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","LikeButton","useState","count","counter","limit","release","countUp","useEffect","console","log","document","getElementById","addEventListener","removeEventListener","id","onClick","Article","props","isPublished","togglePublished","title","htmlFor","type","checked","Foo","Bar","Hoge","React","Component","Blog","ReactDOM","render","StrictMode"],"mappings":"4KAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,OCyBCQ,EA9BI,WAAO,IAAD,EACEC,mBAAS,GADX,mBAChBC,EADgB,KACTC,EADS,OAEEF,oBAAS,GAFX,mBAEhBG,EAFgB,KAETC,EAFS,KAIjBC,EAAU,WACdH,EAAQD,EAAQ,IAiBlB,OAdAK,qBAAU,WAQR,OAPAC,QAAQC,IAAI,UACZD,QAAQC,IAAR,mBAAwBP,IACxBQ,SAASC,eAAe,WAAWC,iBAAiB,QAASN,GACzDJ,GAAS,IACXC,EAAQ,GAEVK,QAAQC,IAAR,mBAAwBP,IACjB,WACLM,QAAQC,IAAI,cACZC,SAASC,eAAe,WAAWE,oBAAoB,QAASP,MAEjE,CAACF,IAGF,qCACE,yBAAQU,GAAG,UAAX,uCAA4BZ,KAC5B,wBAAQa,QAAS,kBAAMV,GAASD,IAAhC,kECNSY,EAlBC,SAACC,GAAW,IAAD,EACchB,oBAAS,GADvB,mBAClBiB,EADkB,KACLC,EADK,KAGzB,OACE,gCACE,6BAAKF,EAAMG,QACX,uBAAOC,QAAQ,QAAf,4CACA,uBACEC,KAAK,WACLC,QAASL,EACTJ,GAAG,QACHC,QAAS,kBAAMI,GAAiBD,MAElC,cAAC,EAAD,QCdC,SAASM,IACd,OACE,wCAIG,IAAMC,EAAM,WACjB,OACE,0C,4BCRiBC,E,uKAEjB,OACE,8C,GAH4BC,IAAMC,WCyCzBC,EAtCF,WAyBX,OACE,qCACE,cAAC,EAAD,CACET,MAAO,+CAGT,cAACI,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QC/BNM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.b8ad8b45.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst LikeButton = () => {\r\n  const [count, counter] = useState(0);\r\n  const [limit, release] = useState(true);\r\n\r\n  const countUp = () => {\r\n    counter(count + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"render\");\r\n    console.log(`count is ${count}`);\r\n    document.getElementById(\"counter\").addEventListener(\"click\", countUp);\r\n    if (count >= 10) {\r\n      counter(0);\r\n    }\r\n    console.log(`count is ${count}`);\r\n    return () => {\r\n      console.log(\"unmounting\");\r\n      document.getElementById(\"counter\").removeEventListener(\"click\", countUp);\r\n    };\r\n  }, [limit]);\r\n\r\n  return (\r\n    <>\r\n      <button id=\"counter\">いいね数: {count}</button>\r\n      <button onClick={() => release(!limit)}>もっといいねする</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LikeButton;\r\n","import React, { useState } from \"react\";\r\nimport LikeButton from \"./LikeButton\";\r\n\r\nconst Article = (props) => {\r\n  const [isPublished, togglePublished] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <h2>{props.title}</h2>\r\n      <label htmlFor=\"check\">公開状態：</label>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={isPublished}\r\n        id=\"check\"\r\n        onClick={() => togglePublished(!isPublished)}\r\n      />\r\n      <LikeButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Article;\r\n","import React from \"react\";\r\n\r\nexport function Foo(){\r\n  return(\r\n    <h2>Fooooo</h2>\r\n  )\r\n}\r\n\r\nexport const Bar = () => {\r\n  return (\r\n    <h2>Baaaaar</h2>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default class Hoge extends React.Component {\r\n  render() {\r\n    return (\r\n      <h2>Hogeeeee</h2>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Article from \"./Article\";\r\nimport * as FooBar from \"./components/FooBar\";\r\nimport Hoge from \"./components/Hoge\";\r\n\r\nconst Blog = () => {\r\n\r\n  // componentDidMount() {\r\n  //   document.getElementById(\"counter\").addEventListener(\"click\", this.countUp);\r\n  // }\r\n\r\n  // componentDidUpdate() {\r\n  //   if (this.state.count >= 10) {\r\n  //     this.setState({\r\n  //       count: 0,\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  // componentWillUnmount() {\r\n  //   document.getElementById(\"counter\").removeEventListener(\"click\", this.countUp);\r\n  // }\r\n\r\n\r\n  // countUp = () => {\r\n  //   this.setState({\r\n  //     count: this.state.count + 1,\r\n  //   });\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Article\r\n        title={\"記事のタイトル\"}\r\n        // count={this.state.count}\r\n      />\r\n      <FooBar.Foo />\r\n      <FooBar.Bar />\r\n      <Hoge />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Blog;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Blog from './Blog';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Blog />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}